<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.fontawesome.io/icons/">
    
    <Style x:Key="styleTitle" TargetType="TextBlock">
        <Setter Property="Background" Value="Green"/>
        <Setter Property="Foreground" Value="GhostWhite"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="FontFamily" Value="Coronet"/>
    </Style>


    <Style x:Key="simpleTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontFamily" Value="Coronet"/>
    </Style>

    <Style x:Key="menuTitle" TargetType="TextBlock">
        <Setter Property="Margin" Value="0 0 25 0"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Opacity" Value="0.7"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="menuButtonIcon" TargetType="fa:ImageAwesome">
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Button}}}"/>
    </Style>

    <Style x:Key="menuButtonText" TargetType="TextBlock">
        <Setter Property="Margin" Value="0 5 0 0"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
    </Style>

    <Style x:Key="menuButton" TargetType="Button">
        <Setter Property="Margin" Value="0 5 0 0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="90"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#A9A9A9"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="15" Padding="15">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Green"/>
                <Setter Property="Foreground" Value="#FFFFFF"/>
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="ForestGreen"/>
                <Setter Property="Foreground" Value="#FFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="infoCardTitle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="#E9E9E9"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="Margin" Value="0 0 0 20"/>
    </Style>
    <Style x:Key="CustomDataGridStyle" TargetType="DataGrid">
        <Setter Property="Margin" Value="10"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="RowHeight" Value="40"/>
        <Setter Property="GridLinesVisibility" Value="All"/>
        <Setter Property="ColumnHeaderHeight" Value="40"/>

        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="FontSize" Value="17"/>
                    <Setter Property="Padding" Value="5"/>
                    <Setter Property="BorderBrush" Value="Gray"/>
                    <Setter Property="BorderThickness" Value="1 0 1 1"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="Padding" Value="10"/>
                    <Setter Property="BorderBrush" Value="DarkGray"/>
                    <Setter Property="BorderThickness" Value="0 0 1 1"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Foreground" Value="Black"/>

                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Green"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="ForestGreen"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="validationTemplate">
        <DockPanel>
            <TextBlock Foreground="Red" FontSize="20">!</TextBlock>
            <AdornedElementPlaceholder/>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="textBoxInError" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
    Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                    Path=(Validation.Errors)/ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>